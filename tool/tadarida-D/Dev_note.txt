
 TadaridaD -t $(nombreThread) -x $(timeExpension) -v $(typeDonExtraction) -f $(frequencyBand) $(fichierSon)

 <section name="advanced" title="Advanced options" expanded="False">
    <param argument="--size" type="integer" value="7" label="..." help="..."/>
</section>

-t [n] allows to execute n parallel threads (1 by default)
Note that 1 thread consumes approximately 150 MB of memory.
-x [n] is the time expansion factor, either 10 (default) for 10-times expanded .wav files (most commonly used in bat monitoring) or 1 for direct recordings.
-v [n] sets the list of features to be extracted on each detected sound events (1 by default, see appendix)
_f [n] set the frequency bands to be used; n = 2 allows to treat low frequencies (0.8 to 25 kHz) whereas n=1 (default) treats high frequencies (8 to 250 kHz). See below “shapesDetect” method description for more details.
-c gives compressed version of .ta output files, either .ta.gz (gunzip) format on Linux or .tac (7-zip) format on Windows
After these settings, must be mentioned either a directory path containing .wav files or a list of .wav files, to be processed. Relative or absolute paths can be used.


Here, find some examples of command lines executing Tadarida-D:
>TadaridaD -t 4 -x 1 file1.wav file2.wav
>TadaridaD -t 4 wavfolder

New feature (05/2016 – version 2.1):
A " –r [n]" setting recently introduced allows Tadarida-D to handle both recording (thanks to sox toolbox available in both Linux and Windows) and processing at the same time. N is the number of “.wav” files to generate (duration : 5 seconds).
In that case, we can indicate:
-a [code] for the input sound alsa device name (default: hw:1,0)
-w to save .wav files (suppressed after processing by default)
In that kind of use, no input files or directories are given.
For the moment, this feature is only tested on linux.
Example : ./TadaridaD –r 1000 –a r2   records 1000 sound files of 5 seconds and treats them.